C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\Objects\cmd.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE cmd.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\cmd.lst) OBJECT(.\Ob
                    -jects\cmd.obj)

line level    source

   1          #include "rtx.h"
   2          #include "stc8.h"
   3          #include "adc.h"
   4          #include "cmd.h"
   5          #include "pll.h"
   6          #include "utily.h"
   7          #include "pwm.h"
   8          #include "dac.h"
   9          
  10          unsigned char tx_pwr = 0;
  11          unsigned char tx_enable = 0;
  12          
  13          sbit tx_en = P0^7;
  14          
  15          unsigned char rply[9];
  16          unsigned char rply_len = 0;
  17          unsigned char cmd[5];
  18          unsigned char cmd_backup[5];
  19          unsigned char cmd_len = 0;
  20          
  21          idata unsigned char tx_ctrl_table[64];
  22          idata signed char tx_pwr_table[40];
  23          
  24          void Cmd_InitTable()
  25          {
  26   1              tx_ctrl_table[0] = 795;
  27   1      
  28   1      
  29   1      
  30   1              tx_ctrl_table[63] = 490;
  31   1      
  32   1              tx_pwr_table[0] = 0;
  33   1      
  34   1      
  35   1          tx_pwr_table[0] = 0;
  36   1      
  37   1              tx_en = 1;
  38   1      }
  39          
  40          void Cmd_set(unsigned char content)
  41          {
  42   1              if(cmd_len == 5)
  43   1                      cmd_len = 0;
  44   1      
  45   1              cmd[cmd_len] = content;
  46   1              cmd_len++;
  47   1      }
  48          
  49          void Cmd_Del(unsigned char size)
  50          {
  51   1              unsigned char remain,i;
  52   1              if(cmd_len < size)
  53   1                      size = cmd_len;
  54   1      
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 2   

  55   1              remain = cmd_len - size;
  56   1              for(i=0;i<remain;i++)
  57   1                      cmd_backup[i] = cmd[size+i];
  58   1              for(i=0;i<remain;i++)
  59   1                      cmd[i] = cmd_backup[i];
  60   1              cmd_len =  remain;
  61   1      }
  62          
  63          unsigned char Cmd_IsNew()
  64          {
  65   1              if(cmd_len < 3)
  66   1                      return 0;
  67   1      
  68   1              if(cmd[0] == 0xa1)
  69   1              {
  70   2                      if((cmd[2] != 0x00) && (cmd[2] != 0x0a))
  71   2                      {
  72   3                              Cmd_Del(3);
  73   3                              return 0;
  74   3                      }
  75   2      
  76   2                      if(cmd_len < 4)
  77   2                              return 0;
  78   2      
  79   2                      if(cmd[3] != CRC(cmd,3))
  80   2                      {
  81   3                              Cmd_Del(3);
  82   3                              return 0;
  83   3                      }
  84   2                      else return 1;
  85   2              }
  86   1              else if(cmd[0] == 0xa2)
  87   1              {
  88   2                      if((cmd[2] != 0x01) && (cmd[2] != 0x02))
  89   2                      {
  90   3                              Cmd_Del(3);
  91   3                              return 0;
  92   3                      }
  93   2      
  94   2                      if(cmd_len < 5)
  95   2                              return 0;
  96   2      
  97   2                      if(cmd[4] != CRC(cmd,4))
  98   2                      {
  99   3                              Cmd_Del(3);
 100   3                              return 0;
 101   3                      }
 102   2                      else return 1; 
 103   2              }
 104   1              else if(cmd[0] == 0xa3)
 105   1              {
 106   2                      if((cmd[2] != 0x01) && (cmd[2] != 0x81))
 107   2                      {
 108   3                              Cmd_Del(3);
 109   3                              return 0;
 110   3                      }
 111   2      
 112   2                      if(cmd_len < 5)
 113   2                              return 0;
 114   2      
 115   2                      if(cmd[4] != CRC(cmd,4))
 116   2                      {
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 3   

 117   3                              Cmd_Del(3);
 118   3                              return 0;
 119   3                      }
 120   2                      else return 1; 
 121   2              }
 122   1              else
 123   1              {
 124   2                      Cmd_Del(3);
 125   2                      return 0;
 126   2              }
 127   1      }
 128          
 129          
 130          void Cmd_reply()
 131          {
 132   1              unsigned int i;
 133   1              for(i=0;i<rply_len;i++)
 134   1                      RTX_Send(rply[i]);
 135   1      
 136   1              rply_len = 0;
 137   1      }
 138          
 139          void Cmd_ack(unsigned char size)
 140          {
 141   1              unsigned int i;
 142   1              for(i=0;i<size;i++)
 143   1                      RTX_Send(cmd[i]);
 144   1      }
 145          
 146          void BuildPwrRply()
 147          {       
 148   1              unsigned char var = GetLO1Voltage();
 149   1      
 150   1              rply[0] = 0xa1;
 151   1              rply[1] = 0x05;
 152   1              rply[2] = 0x00;
 153   1      
 154   1              rply[3] = tx_pwr_table[var];
 155   1      
 156   1              if(PLL_IsTxLocked() == 1)
 157   1                      rply[4] = 5;
 158   1              else rply[4] = 4;
 159   1      
 160   1              if(PLL_IsTxLocked() == 1)
 161   1                      rply[5] = 5;
 162   1              else rply[5] = 4;
 163   1      
 164   1              if(PLL_IsRxLocked() == 1)
 165   1                      rply[6] = 5;
 166   1              else rply[6] = 4;
 167   1      
 168   1              rply[7] = CRC(rply,7);
 169   1              rply_len = 8;
 170   1      }
 171          
 172          void BuildLOLockRply()
 173          {
 174   1              rply[0] = 0xa1;
 175   1              rply[1] = 0x02;
 176   1              rply[2] = 0x01;
 177   1      
 178   1              rply[3] = PLL_IsRxLocked();
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 4   

 179   1              rply[3] = (rply[2] << 1);
 180   1      
 181   1              rply[3] |= PLL_IsTxLocked();
 182   1              rply[3] = (rply[2] << 1);
 183   1              rply[3] |= PLL_IsTxLocked();
 184   1      
 185   1              rply[4] = CRC(rply,4);
 186   1              rply_len = 5;
 187   1      }
 188          
 189          void BuildTxPwrRply()
 190          {
 191   1              unsigned char var = GetLO1Voltage();
 192   1      
 193   1              rply[0] = 0xa1;
 194   1              rply[1] = 0x02;
 195   1              rply[2] = 0x02;
 196   1      
 197   1              rply[3] = tx_pwr_table[var];
 198   1      
 199   1              rply[4] = CRC(rply,4);
 200   1              rply_len = 5;
 201   1      }
 202          
 203          void BuildTxLO1PwrRply()
 204          {
 205   1              rply[0] = 0xa1;
 206   1              rply[1] = 0x02;
 207   1              rply[2] = 0x03;
 208   1      
 209   1              if(PLL_IsTxLocked() == 1)
 210   1                      rply[3] = 5;
 211   1              else rply[3] = 4;
 212   1      
 213   1              rply[4] = CRC(rply,4);
 214   1              rply_len = 5;
 215   1      }
 216          
 217          void BuildTxLO2PwrRply()
 218          {
 219   1              rply[0] = 0xa1;
 220   1              rply[1] = 0x02;
 221   1              rply[2] = 0x04;
 222   1      
 223   1              if(PLL_IsTxLocked() == 1)
 224   1                      rply[3] = 5;
 225   1              else rply[3] = 4;
 226   1      
 227   1              rply[4] = CRC(rply,4);
 228   1              rply_len = 5;
 229   1      }
 230          
 231          void BuildRxLO3Rply()
 232          {
 233   1              rply[0] = 0xa1;
 234   1              rply[1] = 0x02;
 235   1              rply[2] = 0x05;
 236   1      
 237   1              if(PLL_IsRxLocked() == 1)
 238   1                      rply[3] = 5;
 239   1              else rply[3] = 4;
 240   1      
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 5   

 241   1              rply[4] = CRC(rply,4);
 242   1              rply_len = 5;   
 243   1      }
 244          
 245          void BuildAllStateRply()
 246          {
 247   1              rply[0] = 0xa1;
 248   1              rply[1] = 0x06;
 249   1              rply[2] = 0x06;
 250   1      
 251   1              rply[3] = PLL_IsRxLocked();
 252   1              rply[3] = (rply[2] << 1);
 253   1      
 254   1              rply[3] |= PLL_IsTxLocked();
 255   1              rply[3] = (rply[2] << 1);
 256   1              rply[3] |= PLL_IsTxLocked();
 257   1      
 258   1              rply[4] = tx_pwr/2;
 259   1      
 260   1              rply[5] = GetLO1Voltage();
 261   1              rply[6] = GetLO1Voltage();
 262   1              rply[7] = GetLO3Voltage();
 263   1      
 264   1              rply[8] = CRC(rply,8);
 265   1              rply_len = 9;   
 266   1      }
 267          
 268          void BuildTxEnableRply()
 269          {
 270   1              rply[0] = 0xa1;
 271   1              rply[1] = 0x02;
 272   1              rply[2] = 0x07;
 273   1      
 274   1              rply[3] = tx_enable;
 275   1      
 276   1              rply[4] = CRC(rply,4);
 277   1              rply_len = 5;
 278   1      }
 279          
 280          void BuildTxPowerATTRply()
 281          {
 282   1              rply[0] = 0xa1;
 283   1              rply[1] = 0x02;
 284   1              rply[2] = 0x08;
 285   1      
 286   1              rply[3] = tx_pwr;
 287   1      
 288   1              rply[4] = CRC(rply,4);
 289   1              rply_len = 5;
 290   1      }
 291          
 292          void BuildHWVerisonRply()
 293          {
 294   1              rply[0] = 0xa1;
 295   1              rply[1] = 0x02;
 296   1              rply[2] = 0x09;
 297   1      
 298   1              rply[3] = 1;
 299   1      
 300   1              rply[4] = CRC(rply,4);
 301   1              rply_len = 5;
 302   1      }
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 6   

 303          
 304          void BuildSWVersionRply()
 305          {
 306   1              rply[0] = 0xa1;
 307   1              rply[1] = 0x02;
 308   1              rply[2] = 0x0a;
 309   1      
 310   1              rply[3] = 1;
 311   1      
 312   1              rply[4] = CRC(rply,4);
 313   1              rply_len = 5;
 314   1      }
 315          
 316          void process_a1(unsigned char cmd_wd)
 317          {
 318   1              switch(cmd_wd)
 319   1              {
 320   2                      case 0x00:
 321   2                              BuildPwrRply();
 322   2                              break;
 323   2                      case 0x01:
 324   2                              BuildLOLockRply();
 325   2                              break;
 326   2                      case 0x02:
 327   2                              BuildTxPwrRply();       
 328   2                              break;
 329   2                      case 0x03:
 330   2                              BuildTxLO1PwrRply();
 331   2                              break;
 332   2                      case 0x04:
 333   2                              BuildTxLO2PwrRply();
 334   2                              break;
 335   2                      case 0x05:
 336   2                              BuildRxLO3Rply();
 337   2                              break;
 338   2                      case 0x06:
 339   2                              BuildAllStateRply();
 340   2                              break;
 341   2                      case 0x07:
 342   2                              BuildTxEnableRply();
 343   2                              break;
 344   2                      case 0x08:
 345   2                              BuildTxPowerATTRply();
 346   2                              break;
 347   2                      case 0x09:
 348   2                              BuildHWVerisonRply();
 349   2                              break;
 350   2                      case 0x0a:
 351   2                              BuildSWVersionRply();
 352   2                              break;
 353   2                      default:
 354   2                              break;
 355   2              }
 356   1      
 357   1              Cmd_Del(4);
 358   1              if(rply_len != 0)
 359   1                      Cmd_reply();
 360   1      }
 361          
 362          void process_a2(unsigned char cmd_wd)
 363          {
 364   1              if(cmd_wd == 0x01)
C51 COMPILER V9.00   CMD                                                                   06/21/2020 20:17:33 PAGE 7   

 365   1              {
 366   2                       tx_enable = cmd[3];
 367   2                       if(tx_enable == 0)
 368   2                              tx_en = 0;
 369   2                       else if(tx_enable == 1)
 370   2                              tx_en = 1;
 371   2              }
 372   1              else if(cmd_wd == 0x02)
 373   1              {
 374   2                      tx_pwr = cmd[3];
 375   2                      WriteI2C(tx_ctrl_table[cmd[3]]);                
 376   2              }
 377   1              Cmd_ack(5);
 378   1              Cmd_Del(5);
 379   1      }
 380          
 381          void process_a3(unsigned char cmd_wd)
 382          {
 383   1              char var;
 384   1      
 385   1              if(cmd_wd == 0x01)
 386   1              {
 387   2                      var = cmd[3] & 0x7f;
 388   2                      PLL_Adjust(var);
 389   2                      Cmd_ack(5);
 390   2              }
 391   1              else if(cmd_wd == 0x81)
 392   1              {
 393   2                      var = cmd[3] & 0x7f;
 394   2                      var = -var;
 395   2                      PLL_Adjust(var);
 396   2                      Cmd_ack(5);
 397   2              }
 398   1      
 399   1              Cmd_Del(5);
 400   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1368    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     23       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    104    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
